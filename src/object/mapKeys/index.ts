import forEach from "../forEach/index.js";

/**
 * Creates an object with keys generated by running the provided function for each key
 * and the same values as the provided object
 * @param obj
 * @param fn
 * @example
 * mapKeys({ a: 1, b: 2 }, (val, key) => key + val); // { a1: 1, b2: 2 }
 */
export default function mapKeys<T extends Record<string, unknown>,
  K extends keyof T>(
  obj: T,
  fn: (value: T[K], key: K, object: T) => string,
): Record<string, unknown> {
  const result: Record<string, unknown> = {};

  forEach<T, K>(
    obj,
    (value, key, object) => (result[fn(value, key, object)] = value),
  );

  return result;
}
