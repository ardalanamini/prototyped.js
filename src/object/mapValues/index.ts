import forEach from "../forEach/index.js";

/**
 * Creates an object with the same keys as the provided object and values
 * generated by running the provided function for each value
 * @param obj
 * @param fn
 * @example
 * const users = {
 *   fred: { user: "fred", age: 40 },
 *   pebbles: { user: "pebbles", age: 1 }
 * };
 * mapValues(users, u => u.age); // { fred: 40, pebbles: 1 }
 */
export default function mapValues<T extends Record<string, unknown>,
  K extends keyof T,
>(
  obj: T,
  fn: (value: T[K], key: K, object: T) => unknown,
): Record<string, unknown> {
  const result = {} as Record<K, unknown>;

  forEach<T, K>(
    obj,
    (value, key, object) => (result[key] = fn(value, key, object)),
  );

  return result;
}
