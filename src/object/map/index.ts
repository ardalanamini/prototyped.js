import forEach from "../forEach/index.js";
import keys from "../keys/index.js";

/**
 * Creates an object with keys and values
 * generated by running the provided function for each value
 * @param obj
 * @param fn
 * @example
 * const users = {
 *   fred: { user: "fred", age: 40 },
 *   pebbles: { user: "pebbles", age: 1 }
 * };
 * map(users, u => u.age); // { fred: 40, pebbles: 1 }
 */
export default function map<
  T extends Record<string, unknown>,
  K extends keyof T,
>(
  obj: T,
  fn: (value: T[K], key: K, object: T) => Record<string, unknown>,
): Record<string, unknown> {
  return keys(obj).reduce<Record<string, unknown>>((prev, k) => {
    forEach(
      fn(obj[k] as never, k as K, obj),
      (value, key) => (prev[key] = value),
    );

    return prev;
  }, {});
}
